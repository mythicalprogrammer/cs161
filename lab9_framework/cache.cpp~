
#include "cache.h"
#include <math.h>
#include <iostream>

using namespace std;

//668353
//343823


cache::cache (unsigned size, unsigned assoc_i, unsigned linesize)
{
  assoc = assoc_i;
  index = size / (assoc * linesize);
  cache_mem = new cache_v[index*assoc];
  
  for(unsigned int i = 0; i < (index*assoc); ++i)
    {
      cache_mem[i].valid = false;
      cache_mem[i].lru = 0;
    }
  
  hit_num = 0;
  miss_num = 0;
  line = linesize; 
}

void cache::read (unsigned address)
{

  //unsigned int offset_value = address % linesize;
 unsigned int index_value = (address >> (unsigned int)log2(line)) % index;
 unsigned int tag_value = address >> ((unsigned int)log2(line) + (unsigned int)log2(index));

 //------------CHECK IF DATA IS IN CACHE------------//
 //-------------------------------------------------//
 int temp_lru = -1;
 bool found = false;
 unsigned int toBereplaceAdd = cache_mem[index_value].lru; // random value
 //unsigned int block = 0;
 int firstInvalidBlck = -1; 
 int hit_index = -1;

 //TEST DEBUG
 cout<<index_value<<endl;

 for( int i = index_value; i < (int)(index*assoc); i +=(int)(index) )  //go to index 
   { 

     if(cache_mem[i].valid == true && cache_mem[i].tag == tag_value)
       {	
	 found = true; //hit
	 ++hit_num;
	 hit_index = i;
	 
	
	 temp_lru = cache_mem[i].lru;
	 
	 cache_mem[hit_index].lru = 1; 
	 
	 /*
	 for(unsigned int y = index_value; y < (index*assoc); y+=(index)) //update lru
	   {
	     if(cache_mem[y].lru < temp_lru && cache_mem[y].tag != tag_value)
	       {
		 cache_mem[y].lru = cache_mem[y].lru + 1;
		 y = index*assoc;
	       }
	   }
	 */
       } // end if
     
     
     if((int)toBereplaceAdd < cache_mem[i].lru) // what if it's a wacky value? //finding the highest lru rank
       {  toBereplaceAdd = i;
	 temp_lru = cache_mem[i].lru;
       }
     
     if(cache_mem[i].valid == false && firstInvalidBlck == -1)
       firstInvalidBlck = i;
     
     
   }// end for loop

 if(found == false) 
   {
     ++miss_num;

     if(firstInvalidBlck == -1) // if everything in the line is filled
       {
	 cache_mem[toBereplaceAdd].valid = true;
	 cache_mem[toBereplaceAdd].lru = 1;     
	 cache_mem[toBereplaceAdd].tag = tag_value; 
	 
	 /*
	 for(unsigned int z = index_value; z < (index*assoc); z+=(index)) //update lru
	   {
	     if(cache_mem[z].lru < temp_lru && cache_mem[z].tag != tag_value)
	       cache_mem[z].lru = cache_mem[z].lru + 1;       
	   } 
	 */

       }
     else if(firstInvalidBlck > -1)
       {
	 cache_mem[firstInvalidBlck].valid = true;
	 cache_mem[firstInvalidBlck].lru = 1;    //update ranking     
	 cache_mem[firstInvalidBlck].tag = tag_value; 
	 
	 /*
	 for(unsigned int a = index_value; a < (index*assoc); a+=(index)) //update lru
	   {
	     if(cache_mem[a].lru < temp_lru && cache_mem[a].tag != tag_value && cache_mem[a].valid != false)
	       cache_mem[a].lru = cache_mem[a].lru + 1;       
	   } 
	 */ 
	 
       }
   }

 //

 for(int y = index; y < (int)(index*assoc); y+=(int)(index)) //update lru
	   {
	     

	      if(cache_mem[y].lru < temp_lru) //&& cache_mem[y].tag != tag_value && cache_mem[y].valid == 1)
	     {
	       cache_mem[y].lru = (cache_mem[y].lru + 1);
	     }

	     
	   }

}

void cache::stat (unsigned& num_hit, unsigned& num_miss)
{
  num_hit = hit_num;

  num_miss = miss_num;

  for(unsigned int i = 0; i < (index*assoc); ++i)
    {
      //cache_mem[i].valid = false;
      cout<<i<<": lru:"<<cache_mem[i].lru<<" tag:"<<cache_mem[i].tag<<" valid:"<<cache_mem[i].valid<<endl;
    }
  
}
